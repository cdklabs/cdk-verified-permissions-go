package cdklabscdkverifiedpermissions

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/cdklabs/cdk-verified-permissions-go/cdklabscdkverifiedpermissions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscognito"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdklabs/cdk-verified-permissions-go/cdklabscdkverifiedpermissions/internal"
)

// Experimental.
type IdentitySource interface {
	awscdk.Resource
	IIdentitySource
	// Experimental.
	AudiencesOIDC() *[]*string
	// Experimental.
	ClientIds() *[]*string
	// Experimental.
	CognitoGroupEntityType() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// Experimental.
	GroupConfigGroupClaimOIDC() *string
	// Experimental.
	GroupConfigGroupEntityTypeOIDC() *string
	// Identity Source identifier.
	// Experimental.
	IdentitySourceId() *string
	// Experimental.
	Issuer() *string
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// Experimental.
	PolicyStore() IPolicyStore
	// Experimental.
	PrincipalIdClaimOIDC() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Experimental.
	UserPoolArn() *string
	// Add an audience to the list.
	//
	// The method can be called only when the Identity Source is configured with OIDC auth provider and Access Token Selection mode.
	// Experimental.
	AddAudience(audience *string)
	// Add a clientId to the list The method can be called only when the Identity Source is configured with one of these configs:  - Cognito auth provider  - OIDC auth provider and ID Token Selection mode.
	// Experimental.
	AddClientId(clientId *string)
	// Add a User Pool Client The method can be called only when the Identity Source is configured with Cognito auth provider.
	// Experimental.
	AddUserPoolClient(userPoolClient awscognito.IUserPoolClient)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for IdentitySource
type jsiiProxy_IdentitySource struct {
	internal.Type__awscdkResource
	jsiiProxy_IIdentitySource
}

func (j *jsiiProxy_IdentitySource) AudiencesOIDC() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"audiencesOIDC",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) ClientIds() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"clientIds",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) CognitoGroupEntityType() *string {
	var returns *string
	_jsii_.Get(
		j,
		"cognitoGroupEntityType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) GroupConfigGroupClaimOIDC() *string {
	var returns *string
	_jsii_.Get(
		j,
		"groupConfigGroupClaimOIDC",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) GroupConfigGroupEntityTypeOIDC() *string {
	var returns *string
	_jsii_.Get(
		j,
		"groupConfigGroupEntityTypeOIDC",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) IdentitySourceId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"identitySourceId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) Issuer() *string {
	var returns *string
	_jsii_.Get(
		j,
		"issuer",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) PolicyStore() IPolicyStore {
	var returns IPolicyStore
	_jsii_.Get(
		j,
		"policyStore",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) PrincipalIdClaimOIDC() *string {
	var returns *string
	_jsii_.Get(
		j,
		"principalIdClaimOIDC",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IdentitySource) UserPoolArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"userPoolArn",
		&returns,
	)
	return returns
}


// Experimental.
func NewIdentitySource(scope constructs.Construct, id *string, props *IdentitySourceProps) IdentitySource {
	_init_.Initialize()

	if err := validateNewIdentitySourceParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_IdentitySource{}

	_jsii_.Create(
		"@cdklabs/cdk-verified-permissions.IdentitySource",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewIdentitySource_Override(i IdentitySource, scope constructs.Construct, id *string, props *IdentitySourceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@cdklabs/cdk-verified-permissions.IdentitySource",
		[]interface{}{scope, id, props},
		i,
	)
}

// Creates Identity Source from its attributes.
// Experimental.
func IdentitySource_FromIdentitySourceAttributes(scope constructs.Construct, id *string, attrs *IdentitySourceAttributes) IIdentitySource {
	_init_.Initialize()

	if err := validateIdentitySource_FromIdentitySourceAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IIdentitySource

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.IdentitySource",
		"fromIdentitySourceAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Create an Identity Source from its identifier.
// Experimental.
func IdentitySource_FromIdentitySourceId(scope constructs.Construct, id *string, identitySourceId *string) IIdentitySource {
	_init_.Initialize()

	if err := validateIdentitySource_FromIdentitySourceIdParameters(scope, id, identitySourceId); err != nil {
		panic(err)
	}
	var returns IIdentitySource

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.IdentitySource",
		"fromIdentitySourceId",
		[]interface{}{scope, id, identitySourceId},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func IdentitySource_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateIdentitySource_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.IdentitySource",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func IdentitySource_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateIdentitySource_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.IdentitySource",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func IdentitySource_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateIdentitySource_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.IdentitySource",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IdentitySource) AddAudience(audience *string) {
	if err := i.validateAddAudienceParameters(audience); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		i,
		"addAudience",
		[]interface{}{audience},
	)
}

func (i *jsiiProxy_IdentitySource) AddClientId(clientId *string) {
	if err := i.validateAddClientIdParameters(clientId); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		i,
		"addClientId",
		[]interface{}{clientId},
	)
}

func (i *jsiiProxy_IdentitySource) AddUserPoolClient(userPoolClient awscognito.IUserPoolClient) {
	if err := i.validateAddUserPoolClientParameters(userPoolClient); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		i,
		"addUserPoolClient",
		[]interface{}{userPoolClient},
	)
}

func (i *jsiiProxy_IdentitySource) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := i.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		i,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (i *jsiiProxy_IdentitySource) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IdentitySource) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := i.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		i,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IdentitySource) GetResourceNameAttribute(nameAttr *string) *string {
	if err := i.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		i,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IdentitySource) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

