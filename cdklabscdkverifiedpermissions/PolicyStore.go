package cdklabscdkverifiedpermissions

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/cdklabs/cdk-verified-permissions-go/cdklabscdkverifiedpermissions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsapigateway"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdklabs/cdk-verified-permissions-go/cdklabscdkverifiedpermissions/internal"
)

// Experimental.
type PolicyStore interface {
	awscdk.Resource
	IPolicyStore
	// Description of the Policy Store.
	// Experimental.
	Description() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// ARN of the Policy Store.
	// Experimental.
	PolicyStoreArn() *string
	// ID of the Policy Store.
	// Experimental.
	PolicyStoreId() *string
	// Name of the Policy Store.
	// Experimental.
	PolicyStoreName() *string
	// Schema definition of the Policy Store.
	// Experimental.
	Schema() *Schema
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Validation Settings of the Policy Store.
	// Experimental.
	ValidationSettings() *ValidationSettings
	// Add multiple policies to the policy store.
	//
	// Returns: An array of created policy constructs.
	// Experimental.
	AddPolicies(policyDefinitions *[]*AddPolicyOptions) *[]Policy
	// Takes in an absolute path to a directory containing .cedar files and adds the contents of each .cedar file as policies to this policy store. Parses the policies with cedar-wasm and, if the policy store has a schema, performs semantic validation of the policies as well.
	//
	// Returns: An array of created Policy constructs.
	// Experimental.
	AddPoliciesFromPath(absolutePath *string) *[]Policy
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Adds an IAM policy statement associated with this policy store to an IAM principal's policy.
	// Experimental.
	Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant
	// Permits an IAM principal all auth operations on the policy store: IsAuthorized, IsAuthorizedWithToken.
	// Experimental.
	GrantAuth(grantee awsiam.IGrantable) awsiam.Grant
	// Permits an IAM principal all read operations on the policy store: GetIdentitySource, GetPolicy, GetPolicyStore, GetPolicyTemplate, GetSchema, ListIdentitySources, ListPolicies, ListPolicyTemplates.
	// Experimental.
	GrantRead(grantee awsiam.IGrantable) awsiam.Grant
	// Permits an IAM principal all write & read operations on the policy store: CreateIdentitySource, CreatePolicy,CreatePolicyTemplate, DeleteIdentitySource, DeletePolicy, DeletePolicyTemplate, PutSchema, UpdateIdentitySource, UpdatePolicy, UpdatePolicyTemplate.
	// Experimental.
	GrantWrite(grantee awsiam.IGrantable) awsiam.Grant
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for PolicyStore
type jsiiProxy_PolicyStore struct {
	internal.Type__awscdkResource
	jsiiProxy_IPolicyStore
}

func (j *jsiiProxy_PolicyStore) Description() *string {
	var returns *string
	_jsii_.Get(
		j,
		"description",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) PolicyStoreArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"policyStoreArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) PolicyStoreId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"policyStoreId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) PolicyStoreName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"policyStoreName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) Schema() *Schema {
	var returns *Schema
	_jsii_.Get(
		j,
		"schema",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PolicyStore) ValidationSettings() *ValidationSettings {
	var returns *ValidationSettings
	_jsii_.Get(
		j,
		"validationSettings",
		&returns,
	)
	return returns
}


// Experimental.
func NewPolicyStore(scope constructs.Construct, id *string, props *PolicyStoreProps) PolicyStore {
	_init_.Initialize()

	if err := validateNewPolicyStoreParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_PolicyStore{}

	_jsii_.Create(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewPolicyStore_Override(p PolicyStore, scope constructs.Construct, id *string, props *PolicyStoreProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		[]interface{}{scope, id, props},
		p,
	)
}

// Create a PolicyStore construct that represents an external PolicyStore via policy store arn.
// Experimental.
func PolicyStore_FromPolicyStoreArn(scope constructs.Construct, id *string, policyStoreArn *string) IPolicyStore {
	_init_.Initialize()

	if err := validatePolicyStore_FromPolicyStoreArnParameters(scope, id, policyStoreArn); err != nil {
		panic(err)
	}
	var returns IPolicyStore

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		"fromPolicyStoreArn",
		[]interface{}{scope, id, policyStoreArn},
		&returns,
	)

	return returns
}

// Creates a PolicyStore construct that represents an external Policy Store.
// Experimental.
func PolicyStore_FromPolicyStoreAttributes(scope constructs.Construct, id *string, attrs *PolicyStoreAttributes) IPolicyStore {
	_init_.Initialize()

	if err := validatePolicyStore_FromPolicyStoreAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IPolicyStore

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		"fromPolicyStoreAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Create a PolicyStore construct that represents an external policy store via policy store id.
// Experimental.
func PolicyStore_FromPolicyStoreId(scope constructs.Construct, id *string, policyStoreId *string) IPolicyStore {
	_init_.Initialize()

	if err := validatePolicyStore_FromPolicyStoreIdParameters(scope, id, policyStoreId); err != nil {
		panic(err)
	}
	var returns IPolicyStore

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		"fromPolicyStoreId",
		[]interface{}{scope, id, policyStoreId},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func PolicyStore_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validatePolicyStore_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func PolicyStore_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validatePolicyStore_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func PolicyStore_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validatePolicyStore_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// This method generates a schema based on an swagger file.
//
// It makes the same assumptions and decisions
// made in the Amazon Verified Permissions console. This feature is built for swagger files generated from an Amazon API Gateway
// export. It's possible that some swagger files generated by other tools will not work. In that case, please
// file an issue.
// Experimental.
func PolicyStore_SchemaFromOpenApiSpec(swaggerFilePath *string, groupEntityTypeName *string) *map[string]*map[string]interface{} {
	_init_.Initialize()

	if err := validatePolicyStore_SchemaFromOpenApiSpecParameters(swaggerFilePath); err != nil {
		panic(err)
	}
	var returns *map[string]*map[string]interface{}

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		"schemaFromOpenApiSpec",
		[]interface{}{swaggerFilePath, groupEntityTypeName},
		&returns,
	)

	return returns
}

// This method generates a schema based on an AWS CDK RestApi construct.
//
// It makes the same assumptions
// and decisions made in the Amazon Verified Permissions console.
// Experimental.
func PolicyStore_SchemaFromRestApi(restApi awsapigateway.RestApi, groupEntityTypeName *string) *map[string]*map[string]interface{} {
	_init_.Initialize()

	if err := validatePolicyStore_SchemaFromRestApiParameters(restApi); err != nil {
		panic(err)
	}
	var returns *map[string]*map[string]interface{}

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-verified-permissions.PolicyStore",
		"schemaFromRestApi",
		[]interface{}{restApi, groupEntityTypeName},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) AddPolicies(policyDefinitions *[]*AddPolicyOptions) *[]Policy {
	if err := p.validateAddPoliciesParameters(policyDefinitions); err != nil {
		panic(err)
	}
	var returns *[]Policy

	_jsii_.Invoke(
		p,
		"addPolicies",
		[]interface{}{policyDefinitions},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) AddPoliciesFromPath(absolutePath *string) *[]Policy {
	if err := p.validateAddPoliciesFromPathParameters(absolutePath); err != nil {
		panic(err)
	}
	var returns *[]Policy

	_jsii_.Invoke(
		p,
		"addPoliciesFromPath",
		[]interface{}{absolutePath},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := p.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (p *jsiiProxy_PolicyStore) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := p.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		p,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) GetResourceNameAttribute(nameAttr *string) *string {
	if err := p.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		p,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) Grant(grantee awsiam.IGrantable, actions ...*string) awsiam.Grant {
	if err := p.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		p,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) GrantAuth(grantee awsiam.IGrantable) awsiam.Grant {
	if err := p.validateGrantAuthParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		p,
		"grantAuth",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) GrantRead(grantee awsiam.IGrantable) awsiam.Grant {
	if err := p.validateGrantReadParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		p,
		"grantRead",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) GrantWrite(grantee awsiam.IGrantable) awsiam.Grant {
	if err := p.validateGrantWriteParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		p,
		"grantWrite",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PolicyStore) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

